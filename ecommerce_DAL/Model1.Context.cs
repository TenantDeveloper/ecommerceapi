//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ecommerce_DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ECom_DemoEntities : DbContext
    {
        public ECom_DemoEntities()
            : base("name=ECom_DemoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Product_Images> Product_Images { get; set; }
        public virtual DbSet<tblCategory> tblCategories { get; set; }
        public virtual DbSet<tblProduct> tblProducts { get; set; }
    
        public virtual int Sp_CreateProduct(string productName, Nullable<decimal> productPrice, Nullable<byte> productDiscount, Nullable<int> quantity, Nullable<int> pecies, Nullable<int> unitWeight, string productDescription, Nullable<int> categoryId)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var productPriceParameter = productPrice.HasValue ?
                new ObjectParameter("productPrice", productPrice) :
                new ObjectParameter("productPrice", typeof(decimal));
    
            var productDiscountParameter = productDiscount.HasValue ?
                new ObjectParameter("productDiscount", productDiscount) :
                new ObjectParameter("productDiscount", typeof(byte));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var peciesParameter = pecies.HasValue ?
                new ObjectParameter("pecies", pecies) :
                new ObjectParameter("pecies", typeof(int));
    
            var unitWeightParameter = unitWeight.HasValue ?
                new ObjectParameter("unitWeight", unitWeight) :
                new ObjectParameter("unitWeight", typeof(int));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("productDescription", productDescription) :
                new ObjectParameter("productDescription", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_CreateProduct", productNameParameter, productPriceParameter, productDiscountParameter, quantityParameter, peciesParameter, unitWeightParameter, productDescriptionParameter, categoryIdParameter);
        }
    
        public virtual ObjectResult<Sp_GetCategoryWithProducts_Result> Sp_GetCategoryWithProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetCategoryWithProducts_Result>("Sp_GetCategoryWithProducts");
        }
    
        public virtual int Sp_UpdateProduct(Nullable<int> productId, string productName, Nullable<decimal> productPrice, Nullable<byte> productDiscount, Nullable<int> quantity, Nullable<int> pecies, Nullable<int> unitWeight, string productDescription, Nullable<int> categoryId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var productPriceParameter = productPrice.HasValue ?
                new ObjectParameter("productPrice", productPrice) :
                new ObjectParameter("productPrice", typeof(decimal));
    
            var productDiscountParameter = productDiscount.HasValue ?
                new ObjectParameter("productDiscount", productDiscount) :
                new ObjectParameter("productDiscount", typeof(byte));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var peciesParameter = pecies.HasValue ?
                new ObjectParameter("pecies", pecies) :
                new ObjectParameter("pecies", typeof(int));
    
            var unitWeightParameter = unitWeight.HasValue ?
                new ObjectParameter("unitWeight", unitWeight) :
                new ObjectParameter("unitWeight", typeof(int));
    
            var productDescriptionParameter = productDescription != null ?
                new ObjectParameter("productDescription", productDescription) :
                new ObjectParameter("productDescription", typeof(string));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("categoryId", categoryId) :
                new ObjectParameter("categoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_UpdateProduct", productIdParameter, productNameParameter, productPriceParameter, productDiscountParameter, quantityParameter, peciesParameter, unitWeightParameter, productDescriptionParameter, categoryIdParameter);
        }
    
        public virtual int Sp_DeleteProduct(Nullable<int> productId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DeleteProduct", productIdParameter);
        }
    
        public virtual ObjectResult<Sp_GetProducts_Result> Sp_GetProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetProducts_Result>("Sp_GetProducts");
        }
    }
}
